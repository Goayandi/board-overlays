commit 18752092b0710d0289df6834ae36c6ad2be81e1c
Author: Andrey Ulanov <andreyu@google.com>
Date:   Thu Dec 8 17:24:06 2016 -0800

    nspawn: when getting SIGCHLD make sure it's from the first child
    
    When getting SIGCHLD we should not assume that it was the first
    child forked from system-nspawn that has died as it may also be coming
    from an orphan process. This change adds a signal handler that ignores
    SIGCHLD unless it came from the first containerized child - the real
    child.
    
    Before this change the problem can be reproduced as follows:
    
    $ sudo systemd-nspawn --directory=/container-root --share-system
    Press ^] three times within 1s to kill container.
    [root@andreyu-coreos ~]# { true & } &
    [1] 22201
    [root@andreyu-coreos ~]#
    Container root-fedora-latest terminated by signal KILL

diff --git a/src/nspawn/nspawn.c b/src/nspawn/nspawn.c
index 837947e..ab8a00d 100644
--- a/src/nspawn/nspawn.c
+++ b/src/nspawn/nspawn.c
@@ -39,6 +39,7 @@
 #include <sys/personality.h>
 #include <linux/loop.h>
 #include <sys/file.h>
+#include <sys/wait.h>
 
 #ifdef HAVE_SELINUX
 #include <selinux/selinux.h>
@@ -3999,6 +4000,26 @@ static int on_orderly_shutdown(sd_event_source *s, const struct signalfd_siginfo
         return 0;
 }
 
+static int on_sigchld(sd_event_source *s, const struct signalfd_siginfo *ssi, void *userdata) {
+        for (;;) {
+                siginfo_t si = {};
+                if (waitid(P_ALL, 0, &si, WNOHANG|WNOWAIT|WEXITED) < 0)
+                        return log_error_errno(errno, "Failed to waitid(): %m");
+                if (si.si_pid == 0) /* No pending children. */
+                        break;
+                if (si.si_pid == PTR_TO_UINT32(userdata)) {
+                        /* The main process we care for has exited. Return from
+                         * signal handler but leave the zombie. */
+                        sd_event_exit(sd_event_source_get_event(s), 0);
+                        break;
+                }
+                /* Reap all other children. */
+                (void) waitid(P_PID, si.si_pid, &si, WNOHANG|WEXITED);
+        }
+
+        return 0;
+}
+
 static int determine_names(void) {
         int r;
 
@@ -4981,8 +5002,8 @@ int main(int argc, char *argv[]) {
                         sd_event_add_signal(event, NULL, SIGTERM, NULL, NULL);
                 }
 
-                /* simply exit on sigchld */
-                sd_event_add_signal(event, NULL, SIGCHLD, NULL, NULL);
+                /* Exit when the child exits */
+                sd_event_add_signal(event, NULL, SIGCHLD, on_sigchld, UINT32_TO_PTR(pid));
 
                 if (arg_expose_ports) {
                         r = watch_rtnl(event, rtnl_socket_pair[0], &exposed, &rtnl);
