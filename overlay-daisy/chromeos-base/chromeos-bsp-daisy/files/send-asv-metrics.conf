# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description   "Report once-per-boot UMA statistics about speed group"
author        "chromium-os-dev@chromium.org"

start on started system-services

script
  # Fused devices look like this.  We want the RESULT (0 - 11):
  #   EXYNOS5250: Adaptive Support Voltage init
  #   EXYNOS5250: ASV lock int: 0 g3d: 0 arm: 0
  #   EXYNOS5250: ORIG: 9 MOD: 0 RESULT: 9
  #
  # We also want info on the lock bits where int should be 0-1, g32 should
  # be 0-1, and arm should be 0-3.
  #
  # Non-fused devices (should only be prototype devices) look like this.  Again
  # we want RESULT (0 - 11):
  #   EXYNOS5250: Adaptive Support Voltage init
  #   Exynos5250: Lot ID is NZW25 and wafer number is 2
  #   EXYNOS5250: IDS:21 HPM:15 RESULT:7 MIF:2
  #
  # For non-fused devices we also want some stats on lot ID since we have some
  # special behavior for different lots in the kernel and want to know how many
  # people are running that special code.  We use this enumeration:
  #   Fused device (lot ID not reported) - 0
  #   Non-special lot ID - 1
  #   NZVPU - 2
  #   NZVR7 - 3
  #   No ASV message found - 4
  #
  # This awk script will parse 'dmesg -t' and output the asv group and
  # lot_id_enum.
  #
  # Note that although we expect an ASV group (0-11), technically the code
  # could produce an ASV group of up to 15.  We'll use 16 as the sentinal
  # "ASV group not found" to differentiate bad fusings from a missing message.
  GET_ASV_INFO='
    BEGIN {
      lot_id_enum = 4;
      asv_group = 16;
      int_lock=2;
      g3d_lock=2;
      arm_lock=4;
    }
    /EXYNOS5250: Adaptive Support Voltage init/,(false) {
      if (lot_id_enum == 4) {
        lot_id_enum = 0;
      }
      if ($0 ~ /Exynos5250: Lot ID is .* and wafer number is .*/) {
        lot_id_enum = 1;
        if ($5 == "NZVPU") {
          lot_id_enum = 2;
        } else if ($5 == "NZVR7") {
          lot_id_enum = 3;
        }
      } else if ($0 ~ /EXYNOS5250: ASV lock int: [0-1] g3d: [0-1] arm: [0-3]/) {
        int_lock = $5;
        g3d_lock = $7;
        arm_lock = $9;
      } else if ($0 ~ /EXYNOS5250: .+ RESULT: ?[0-9]+.*/) {
        sub("EXYNOS5250: .+ RESULT: ?", "");
        asv_group = $1;
        exit;
      }
    }
    END {
      print asv_group, lot_id_enum, int_lock, g3d_lock, arm_lock;
    }
  '
  asv_info=$(dmesg -t | awk "${GET_ASV_INFO}")
  asv_group=$(echo $asv_info | cut -d' ' -f1)
  lot_id_enum=$(echo $asv_info | cut -d' ' -f2)
  int_lock=$(echo $asv_info | cut -d' ' -f3)
  g3d_lock=$(echo $asv_info | cut -d' ' -f4)
  arm_lock=$(echo $asv_info | cut -d' ' -f5)

  metrics_client -e Platform.AsvGroup ${asv_group} 16
  metrics_client -e Platform.LotIdEnum ${lot_id_enum} 4

  metrics_client -e Platform.AsvIntLock ${int_lock} 2
  metrics_client -e Platform.AsvG3dLock ${g3d_lock} 2
  metrics_client -e Platform.AsvArmLock ${arm_lock} 4

end script
