commit 0e6f5f4202fbb1c2005af9921b8656d0d6b58cf0
Author: Andrey Ulanov <andreyu@google.com>
Date:   Thu Sep 8 10:06:22 2016 -0700

    Add DefaultOOMScoreAdjust option in systemd-system.conf
    
    DefaultOOMScoreAdjust sets default OOMScoreAdjust for all services.
    It defaults to 0 if not set.

diff --git a/src/core/execute.c b/src/core/execute.c
index 28eeeaa..deee85e 100644
--- a/src/core/execute.c
+++ b/src/core/execute.c
@@ -1438,7 +1438,9 @@ static int exec_child(
                 }
         }
 
-        if (context->oom_score_adjust_set) {
+        {
+                int oom_score_adjust = context->oom_score_adjust_set ? context->oom_score_adjust : unit->manager->default_oom_score_adjust;
+
                 char t[DECIMAL_STR_MAX(context->oom_score_adjust)];
 
                 /* When we can't make this change due to EPERM, then
@@ -1446,7 +1448,7 @@ static int exec_child(
                  * prohibit write access to this file, and we
                  * shouldn't trip up over that. */
 
-                sprintf(t, "%i", context->oom_score_adjust);
+                sprintf(t, "%i", oom_score_adjust);
                 r = write_string_file("/proc/self/oom_score_adj", t, 0);
                 if (r == -EPERM || r == -EACCES) {
                         log_open();
diff --git a/src/core/load-fragment.c b/src/core/load-fragment.c
index b3bf8bd..e1605a2 100644
--- a/src/core/load-fragment.c
+++ b/src/core/load-fragment.c
@@ -470,6 +470,41 @@ int config_parse_exec_nice(const char *unit,
         return 0;
 }
 
+int config_parse_default_oom_score_adjust(const char* unit,
+                                          const char *filename,
+                                          unsigned line,
+                                          const char *section,
+                                          unsigned section_line,
+                                          const char *lvalue,
+                                          int ltype,
+                                          const char *rvalue,
+                                          void *data,
+                                          void *userdata) {
+
+        int *out = data;
+        int oa, r;
+
+        assert(filename);
+        assert(lvalue);
+        assert(rvalue);
+        assert(data);
+
+        r = safe_atoi(rvalue, &oa);
+        if (r < 0) {
+                log_syntax(unit, LOG_ERR, filename, line, r, "Failed to parse the OOM score adjust value, ignoring: %s", rvalue);
+                return 0;
+        }
+
+        if (oa < OOM_SCORE_ADJ_MIN || oa > OOM_SCORE_ADJ_MAX) {
+                log_syntax(unit, LOG_ERR, filename, line, 0, "OOM score adjust value out of range, ignoring: %s", rvalue);
+                return 0;
+        }
+
+        *out = oa;
+
+        return 0;
+}
+
 int config_parse_exec_oom_score_adjust(const char* unit,
                                        const char *filename,
                                        unsigned line,
diff --git a/src/core/load-fragment.h b/src/core/load-fragment.h
index fcca2b0..715d5bb 100644
--- a/src/core/load-fragment.h
+++ b/src/core/load-fragment.h
@@ -39,6 +39,7 @@ int config_parse_documentation(const char *unit, const char *filename, unsigned
 int config_parse_socket_listen(const char *unit, const char *filename, unsigned line, const char *section, unsigned section_line, const char *lvalue, int ltype, const char *rvalue, void *data, void *userdata);
 int config_parse_socket_bind(const char *unit, const char *filename, unsigned line, const char *section, unsigned section_line, const char *lvalue, int ltype, const char *rvalue, void *data, void *userdata);
 int config_parse_exec_nice(const char *unit, const char *filename, unsigned line, const char *section, unsigned section_line, const char *lvalue, int ltype, const char *rvalue, void *data, void *userdata);
+int config_parse_default_oom_score_adjust(const char *unit, const char *filename, unsigned line, const char *section, unsigned section_line, const char *lvalue, int ltype, const char *rvalue, void *data, void *userdata);
 int config_parse_exec_oom_score_adjust(const char *unit, const char *filename, unsigned line, const char *section, unsigned section_line, const char *lvalue, int ltype, const char *rvalue, void *data, void *userdata);
 int config_parse_exec(const char *unit, const char *filename, unsigned line, const char *section, unsigned section_line, const char *lvalue, int ltype, const char *rvalue, void *data, void *userdata);
 int config_parse_service_timeout(const char *unit, const char *filename, unsigned line, const char *section, unsigned section_line, const char *lvalue, int ltype, const char *rvalue, void *data, void *userdata);
diff --git a/src/core/main.c b/src/core/main.c
index 87b97aa..faa1435 100644
--- a/src/core/main.c
+++ b/src/core/main.c
@@ -114,6 +114,7 @@ static FILE* arg_serialization = NULL;
 static bool arg_default_cpu_accounting = false;
 static bool arg_default_blockio_accounting = false;
 static bool arg_default_memory_accounting = false;
+static int arg_default_oom_score_adjust = 0;
 
 static void nop_handler(int sig) {}
 
@@ -672,6 +673,7 @@ static int parse_config_file(void) {
                 { "Manager", "DefaultCPUAccounting",      config_parse_bool,             0, &arg_default_cpu_accounting            },
                 { "Manager", "DefaultBlockIOAccounting",  config_parse_bool,             0, &arg_default_blockio_accounting        },
                 { "Manager", "DefaultMemoryAccounting",   config_parse_bool,             0, &arg_default_memory_accounting         },
+                { "Manager", "DefaultOOMScoreAdjust",     config_parse_default_oom_score_adjust, 0, &arg_default_oom_score_adjust  },
                 {}
         };
 
@@ -700,6 +702,7 @@ static void manager_set_defaults(Manager *m) {
         m->default_cpu_accounting = arg_default_cpu_accounting;
         m->default_blockio_accounting = arg_default_blockio_accounting;
         m->default_memory_accounting = arg_default_memory_accounting;
+        m->default_oom_score_adjust = arg_default_oom_score_adjust;
 
         manager_set_default_rlimits(m, arg_default_rlimit);
         manager_environment_add(m, NULL, arg_default_environment);
diff --git a/src/core/manager.h b/src/core/manager.h
index 1e01f2b..52b7b08 100644
--- a/src/core/manager.h
+++ b/src/core/manager.h
@@ -254,6 +254,8 @@ struct Manager {
 
         usec_t default_timer_accuracy_usec;
 
+        int default_oom_score_adjust;
+
         struct rlimit *rlimit[_RLIMIT_MAX];
 
         /* non-zero if we are reloading or reexecuting, */
