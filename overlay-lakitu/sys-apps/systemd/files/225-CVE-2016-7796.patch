Cherry-picked from:
https://github.com/systemd/systemd/commit/9987750e7a4c62e0eb8473603150596ba7c3a015

commit ba0fdda7794085a5e509113febab599505d43126
Author: Franck Bui <fbui@suse.com>
Date:   Thu Sep 29 19:44:34 2016 +0200

    pid1: don't return any error in manager_dispatch_notify_fd() (#4240)
    
    If manager_dispatch_notify_fd() fails and returns an error then the handling of
    service notifications will be disabled entirely leading to a compromised system.
    
    For example pid1 won't be able to receive the WATCHDOG messages anymore and
    will kill all services supposed to send such messages.

diff --git a/src/core/manager.c b/src/core/manager.c
index ecea89c..9d2b0fe 100644
--- a/src/core/manager.c
+++ b/src/core/manager.c
@@ -1538,10 +1538,14 @@ static int manager_dispatch_notify_fd(sd_event_source *source, int fd, uint32_t
 
                 n = recvmsg(m->notify_fd, &msghdr, MSG_DONTWAIT|MSG_CMSG_CLOEXEC);
                 if (n < 0) {
-                        if (errno == EAGAIN || errno == EINTR)
-                                break;
-
-                        return -errno;
+                        if (!IN_SET(errno, EAGAIN, EINTR))
+                              log_error("Failed to receive notification message: %m");
+
+                        /* It's not an option to return an error here since it
+                         * would disable the notification handler entirely. Services
+                         * wouldn't be able to send the WATCHDOG message for
+                         * example... */
+                        return 0;
                 }
 
                 CMSG_FOREACH(cmsg, &msghdr) {
@@ -1564,7 +1568,8 @@ static int manager_dispatch_notify_fd(sd_event_source *source, int fd, uint32_t
                         r = fdset_new_array(&fds, fd_array, n_fds);
                         if (r < 0) {
                                 close_many(fd_array, n_fds);
-                                return log_oom();
+                                log_oom();
+                                return 0;
                         }
                 }
 
