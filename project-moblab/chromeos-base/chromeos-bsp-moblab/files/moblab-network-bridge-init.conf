# Copyright (c) 2014 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description   "Configure network bridge and disable wlan0 for moblab"
author        "chromium-os-dev@chromium.org"

start on started network-services

script
  SERVER_ADDRESS=192.168.231.1
  SERVER_NETMASK=255.255.255.0
  DHCPD_IFACE='lxcbr0'
  SHILL_START_LOCK_PATH="/var/lock/shill-start.lock"

  find_usb_dongle() {
    # Assume EXT_IFACE is eth0 by default and USB is not connected.
    USB_IFACE=""
    EXT_IFACE="eth0"
    if readlink -f /sys/class/net/eth0 | grep -q usb; then
      USB_IFACE="eth0"
      EXT_IFACE="eth1"
    elif readlink -f /sys/class/net/eth1 | grep -q usb; then
      USB_IFACE="eth1"
      EXT_IFACE="eth0"
    fi
  }

  set_up_forwarding() {
    # Configure NAT service. This needs to be done each time that shill
    # is restarted as the restart will re-run the iptables setup job
    # and thus wipe the below settings.
    logger -t "${UPSTART_JOB}" "Configuring NAT Service."
    iptables -t nat -A POSTROUTING -o ${EXT_IFACE} -j MASQUERADE
    iptables -A FORWARD -i ${EXT_IFACE} -o ${DHCPD_IFACE} -m state \
      --state RELATED,ESTABLISHED -j ACCEPT
    iptables -A FORWARD -i ${DHCPD_IFACE} -o ${EXT_IFACE} -j ACCEPT

    logger -t "${UPSTART_JOB}" "Enabling IP forwarding"
    echo 1 > /proc/sys/net/ipv4/ip_forward
    echo 0 > /proc/sys/net/bridge/bridge-nf-call-iptables
    echo 0 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
  }

  lock_shill() {
    if [ -e "${SHILL_START_LOCK_PATH}" ]; then
      lock_holder=$(readlink "${SHILL_START_LOCK_PATH}")
      logger -t "${UPSTART_JOB}" "Warning: lock is held by $lock_holder; will retry"
    elif [ -L "${SHILL_START_LOCK_PATH}" ]; then
      logger -t "${UPSTART_JOB}" "Cleaning dangling shill lock held by dead process"
      rm -f "${SHILL_START_LOCK_PATH}"
    fi

    local timeout=30
    while [ "$timeout" -gt 0 ]; do
      ln -s /proc/$$ "${SHILL_START_LOCK_PATH}" && return 0
      # Failure: owner might still have the lock, so retry for a while
      sleep 1
      timeout=$((timeout - 1))
    done
    logger -t "${UPSTART_JOB}" "Error: could not grab shill restart lock after 30 seconds"
    exit 1
  }

  unlock_shill() {
    rm -f "${SHILL_START_LOCK_PATH}"
  }

  # To add a blacklisted device to shill, it requires a restart.
  BLACKLISTED_DEVICES=${DHCPD_IFACE},wlan0

  logger -t "${UPSTART_JOB}" "stopping shill"
  lock_shill
  stop shill

  # Bring up the network bridge and set forward delay to 0.
  logger -t "${UPSTART_JOB}" "Bringing up network bridge ${DHCPD_IFACE}"
  brctl addbr ${DHCPD_IFACE}
  brctl setfd ${DHCPD_IFACE} 0

  # Configure server IP address with ${SERVER_ADDRESS}.
  logger -t "${UPSTART_JOB}" "setting server IP address to ${SERVER_ADDRESS}"
  ifconfig ${DHCPD_IFACE} ${SERVER_ADDRESS} netmask ${SERVER_NETMASK} up

  # Start the dhcpd server on MobLab. It needs the DHCPD_IFACE piped in because
  # on stumpy_moblab this value is not static. See moblab-network-init for more
  # details.
  logger -t "${UPSTART_JOB}" "starting moblab-dhcpd-init"
  start moblab-dhcpd-init DHCPD_IFACE=${DHCPD_IFACE}

  find_usb_dongle
  set_up_forwarding

  # Check the USB interface existence before dhcpd starts for 5 mins after boot.
  reps=0
  while [ ${reps} -lt 300 ]; do
    find_usb_dongle
    if [ -n "${USB_IFACE}" ]; then
      break
    fi
    logger -t "${UPSTART_JOB}" "waiting for USB Ethernet dongle connection(${reps})"
    : $((reps += 1))
    sleep 1
  done
  if [ -z "${USB_IFACE}" ]; then
    logger -t "${UPSTART_JOB}" "No USB Ethernet dongle found on eth0 and eth1 for 5 mins."
    unlock_shill
    exit 0
  fi

  # Disable shill against USB Ethernet dongle(either eth0 or eth1) and wlan0.
  # Shill will automatically ignore the virtual ethernet (veth*) interfaces.
  # Also to add a blacklisted device to shill, it requires a restart.
  logger -t "${UPSTART_JOB}" "starting shill with ${BLACKLISTED_DEVICES}, and ${USB_IFACE}, blacklisted"
  start shill BLACKLISTED_DEVICES=${BLACKLISTED_DEVICES},${USB_IFACE}
  unlock_shill

  # Add delay to initiate USB-Ethernet after restart shill
  sleep 5

  brctl addif ${DHCPD_IFACE} ${USB_IFACE}

  logger -t "${UPSTART_JOB}" "Bringing up ${USB_IFACE}"
  ifconfig ${USB_IFACE} up

  set_up_forwarding
end script
