# Copyright 2015 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# event:shill-connected is emitted by shill indicating that network is up.
start on (started mobbuild-init-begin and
          stopped mobbuild-build-disk-init and
          stopped mobbuild-homedir-init and
          shill-connected)

script
  info () {
    echo "INFO: $@"
    logger -t "${UPSTART_JOB}" "$@"
  }
  warn () {
    echo "WARN: $@"
    logger -t "${UPSTART_JOB}" -p user.warning "$@"
  }
  err () {
    echo "ERR : $@"
    logger -t "${UPSTART_JOB}" -p user.err "$@"
  }
  die () {
    err "$@"
    exit 1
  }
  as_mobbuild() {
    sudo -u mobbuild "$@"
  }

  MOBBUILD_BUILD_DIR="/b"
  MOBBUILD_HOME="/home/mobbuild"
  DEPOT_TOOLS_DIR="${MOBBUILD_BUILD_DIR}/mobbuild_depot_tools"
  INITIALIZED_FLAG_FILE="${MOBBUILD_BUILD_DIR}/.depot_tools_initialized"
  CHROMIUM_URL="https://chromium.googlesource.com"
  DEPOT_TOOLS_REMOTE="${CHROMIUM_URL}/chromium/tools/depot_tools.git"
  export DEPOT_TOOLS_DIR

  # Redirect stdout, stderr to well known log files.
  exec >"${UPSTART_LOG_DIR}/${UPSTART_JOB}.log" 2>&1

  if [ ! -f "${INITIALIZED_FLAG_FILE}" ]; then
    info "Initializing a new repo at ${DEPOT_TOOLS_DIR}."
    # Hard blow away everything. We may have had a failed initialization attempt
    # earlier.
    rm -rf "${DEPOT_TOOLS_DIR}"
    cd "${MOBBUILD_BUILD_DIR}"
    if ! as_mobbuild git clone "${DEPOT_TOOLS_REMOTE}" \
        "${DEPOT_TOOLS_DIR}"; then
      die "Failed to clone depot_tools at ${DEPOT_TOOLS_DIR}."
    fi
    # Don't trust umask, explicitly set permissions on the toplvl dir.
    as_mobbuild chmod 0755 "${DEPOT_TOOLS_DIR}"

    as_mobbuild tee "${INITIALIZED_FLAG_FILE}" >/dev/null <<"__EOF__"
DO NOT REMOVE THIS FILE.
If you remove this file, depot_tools will be re-cloned on next boot.
__EOF__

  fi

  # Always try to bring depot_tools up to date.
  info "Bringing depot_tools up-to-date."
  cd "${DEPOT_TOOLS_DIR}"
  if as_mobbuild git fetch origin master &&
      as_mobbuild git reset --hard FETCH_HEAD; then
    info "depot_tools successfully updated."
  else
    warn "Could not update depot_tools at ${DEPOT_TOOLS_DIR}."
  fi

  # TODO(pprabhu) This adds a lot of stuff, consider adding wrapper scripts in
  # the rootfs like we do for cbuildbot.
  mobbuild_bashrc="${MOBBUILD_HOME}/.bashrc"
  if [ ! -f "${mobbuild_bashrc}" ]; then
    as_mobbuild touch "${mobbuild_bashrc}"
  fi
  if ! grep "PATH.*${DEPOT_TOOLS_DIR}" "${mobbuild_bashrc}"; then
    echo "export PATH=\"\${PATH}:${DEPOT_TOOLS_DIR}\"" >>"${mobbuild_bashrc}"
  fi
end script
