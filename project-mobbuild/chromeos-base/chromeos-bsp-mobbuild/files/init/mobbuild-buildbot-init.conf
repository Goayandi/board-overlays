# Copyright 2015 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# event:shill-connected is emitted by shill indicating that network is up.
start on (started mobbuild-init-begin and
          stopped mobbuild-build-disk-init and
          stopped mobbuild-depot-tools-init and
          shill-connected)

# Poor man's array
env BUILDBOT_INIT_DIRS="build build_internal depot_tools internal.DEPS .gclient"

script
  info() {
    echo "INFO: $*"
    logger -t "${UPSTART_JOB}" -p user.info "$@"
  }
  warn() {
    echo "WARN: $*"
    logger -t "${UPSTART_JOB}" -p user.warning "$@"
  }
  err() {
    echo "ERR : $*"
    logger -t "${UPSTART_JOB}" -p user.err "$@"
  }
  die() {
    err "$*"
    exit 1
  }
  as_mobbuild() {
    # This functions runs the given command as the 'mobbuild' user.
    # In addition, it uses the $PATH in the environment to find the binary to
    # run, and also forwards $PATH across sudo.
    # The end result is that if you set up a custom $PATH, the command runs as
    # if you had set it up for the user 'mobbuild' as well.
    local binary_to_run
    binary_to_run="$(which $1)"
    shift
    sudo -u mobbuild PATH="${PATH}" "${binary_to_run}" "$@"
  }

  MOBBUILD_HOME="/home/mobbuild"
  MOBBUILD_BUILD_DIR="/b"
  DEPOT_TOOLS_DIR="${MOBBUILD_BUILD_DIR}/local_buildtools/depot_tools"
  BUILDBOT_SITE_CONFIG_DIR="${MOBBUILD_BUILD_DIR}/build/site_config"
  INITIALIZED_FLAG_FILE="${MOBBUILD_BUILD_DIR}/.buildbot_initialized"
  CHROMIUM_INT_URL="https://chrome-internal.googlesource.com"
  BUILDBOT_REMOTE="${CHROMIUM_INT_URL}/chrome/tools/build/internal.DEPS"

  # Redirect stdout, stderr to well known log files.
  # This helps in two ways. A lot of the commands below do spew out non-trivial
  # logs that we want to collect. And it's useful to get logs from these jobs
  # under /var/log/upstart/* in their own files.
  exec >"${UPSTART_LOG_DIR}/${UPSTART_JOB}.log" 2>&1

  # We need depot_tools to be in the $PATH so we can run gclient.
  export PATH="${PATH}:${DEPOT_TOOLS_DIR}"

  if [ ! -f "${INITIALIZED_FLAG_FILE}" ]; then
    info "Initializing buildbot at ${MOBBUILD_BUILD_DIR}."
    # Hard blow away everything. We may have had a failed initialization attempt
    # earlier. We can only delete what we know is setup as part of the buildbot
    # initialization. Other directories, created by other upstart jobs, and as
    # part of a build should be left untouched.
    local to_delete
    for dir in ${BUILDBOT_INIT_DIRS}; do
      to_delete="${MOBBUILD_BUILD_DIR}/${dir}"
      info "Deleting ${to_delete}..."
      rm -rf "${to_delete}"
    done

    cd "${MOBBUILD_BUILD_DIR}"
    if ! as_mobbuild gclient config --deps-file .DEPS.git \
        "${BUILDBOT_REMOTE}"; then
      die "Failed to initialize buildbot config."
    fi

    if ! as_mobbuild gclient sync --jobs 10 --no-bootstrap --no-history \
        --reset; then
      die "Failed to sync buildbot at ${MOBBUILD_BUILD_DIR}."
    fi

    # creds setup is reponsible for updating ${MOBBUILD_HOME}/.bot_password .
    mkdir -m 0755 -p "${BUILDBOT_SITE_CONFIG_DIR}"
    chown mobbuild:mobbuild "${BUILDBOT_SITE_CONFIG_DIR}"
    ln -s "${MOBBUILD_HOME}/.bot_password" "${BUILDBOT_SITE_CONFIG_DIR}"
    chown mobbuild:mobbuild "${BUILDBOT_SITE_CONFIG_DIR}/.bot_password"

    as_mobbuild tee "${INITIALIZED_FLAG_FILE}" >/dev/null <<__EOF__
DO NOT REMOVE THIS FILE.
If you remove this file, buildbot checkout will be recreated on next boot.
__EOF__

  fi

  # Always try to bring buildbot up to date.
  info "Bringing buildbot up-to-date."
  cd "${MOBBUILD_BUILD_DIR}"
  if as_mobbuild gclient sync; then
    info "buildbot successfully updated."
  else
    warn "Could not update buildbot at ${MOBBUILD_BUILD_DIR}."
  fi
end script
