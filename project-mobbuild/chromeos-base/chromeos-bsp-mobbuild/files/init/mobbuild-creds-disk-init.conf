# Copyright 2015 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# event:mobbuild-creds-disk-attached is generated by udev when the disk that
# contains the builder credentials is attached. See
# 65-mobbuild-creds-disk-attached.rules
# event:shill-connected is emitted by shill indicating that network is up.
start on (started mobbuild-init-begin and
          stopped mobbuild-homedir-init and
          mobbuild-creds-disk-attached and
          shill-connected)

# Various files that are expected under ${MOBBUILD_CREDS_DIR}
env CHROMIUM_SVN_PASSWORD_FILE='svn_password'
env GITCOOKIES_FILE='.gitcookies'
env CIDB_CREDS_DIR='.cidb_creds'
env TREE_STATUS_PASSWORD_FILE='.status_password_file'
env GMAIL_CREDENTIALS_FILE='.gmail_credentials'

# Various constants that are tied to chromeos setup.
# TODO(pprabhu) Eventually, these should be moved to be part of credentials /
# site-configuration.
env CHROMIUM_HTTP_REMOTE='http://src.chromium.org/svn'
env CHROMIUM_SVN_HOSTNAME='svn.chromium.org'
env CHROMIUM_SVN_USERNAME='chrome-bot@google.com'
# poor man's array
env CHROMIUM_SVN_REPOS="chrome chrome-internal leapfrog-internal"
env GIT_USER_NAME='chrome-bot'
env GIT_USER_EMAIL='chrome-bot@chromium.org'


script
  # MOBBUILD_HOME exported by mobbuild-homedir-init

  # This mount-point must be in stateful, as opposed to rootfs because `cros
  # deploy` fails if we mount a disk read-only at a path inside the rootfs.
  MOBBUILD_CREDS_DIR="${MOBBUILD_HOME}/creds"

  info () {
    echo "INFO: $@"
    logger -t "${UPSTART_JOB}" "$@"
  }
  err () {
    echo "ERR : $@"
    logger -t "${UPSTART_JOB}" -p user.err "$@"
  }
  as_mobbuild() {
    sudo -u mobbuild "$@"
  }

  ignore_cred_setup() {
    local filename
    local filepath
    filename="$1"
    filepath="${MOBBUILD_CREDS_DIR}/${filename}.ignore"

    if [ -e "${filepath}" ]; then
      info "Skipping creds setup for ${filename}"
      return 0
    fi
    return 1
  }

  setup_chromium_svn() {
    if ignore_cred_setup "${CHROMIUM_SVN_PASSWORD_FILE}"; then
      return 0
    fi
    info "Setting up chromium svn credentials."

    local svn_password
    if ! svn_password="$(
        cat "${MOBBUILD_CREDS_DIR}/${CHROMIUM_SVN_PASSWORD_FILE}")"; then
      err "Failed to read svn password."
      return 1
    fi

    if ! as_mobbuild svn ls --non-interactive "${CHROMIUM_HTTP_REMOTE}"; then
      err "Failed to seed svn repository."
      return 1
    fi
    if ! as_mobbuild sed -i -e \
        's/# store-plaintext-passwords = no/store-plaintext-passwords = yes/g' \
        "${MOBBUILD_HOME}/.subversion/servers"; then
      err "Failed to change password storage settings."
      return 1
    fi

    local svn_remote
    local svn_repo
    for svn_repo in ${CHROMIUM_SVN_REPOS}; do
      svn_remote="svn://${CHROMIUM_SVN_HOSTNAME}/${svn_repo}"
      if ! as_mobbuild svn ls --username "${CHROMIUM_SVN_USERNAME}" \
          --password "${svn_password}" "${svn_remote}"; then
        err "Failed to setup svn credentials for ${svn_remote}."
        return 1
      fi
    done
    return 0
  }

  copy_to_homedir() {
    local filename
    filename="$1"

    if ignore_cred_setup "${filename}"; then
      return 0
    fi
    info "Copying ${filename} to ${MOBBUILD_HOME}."

    # Copy, resolving all symlinks.
    # mobbuild may not have read permissions in ${MOBBUILD_CREDS_DIR}
    rm -rf "${MOBBUILD_HOME}/${filename}"
    if ! cp -rfL "${MOBBUILD_CREDS_DIR}/${filename}" "${MOBBUILD_HOME}"; then
      err "Failed to copy ${filename} to ${MOBBUILD_HOME}."
      return 1
    fi
    if ! chown -R mobbuild:mobbuild "${MOBBUILD_HOME}/${filename}"; then
      err "Failed to set change ownership of ${MOBBUILD_HOME}/${filename}."
      return 1
    fi
    return 0
  }

  # BEGIN SCRIPT

  # Redirect stdout, stderr to well known log files.
  exec >"${UPSTART_LOG_DIR}/${UPSTART_JOB}.log" 2>&1

  disk_drive="$(readlink -f /dev/disk/by-label/MOBBUILD_CREDS)"
  if [ -e "${disk_drive}" ]; then
    info "Mounting mobbuild creds dir using ${disk_drive}"
  else
    err "No disk labeled MOBBUILD_CREDS found!"
    err "Mobbuild credentials cannot be initialized."
    exit 1
  fi

  # Repeated executions of this script should succeed, causing a simple remount.
  umount "${MOBBUILD_CREDS_DIR}" || true
  if ! mkdir -m 0755 -p "${MOBBUILD_CREDS_DIR}"; then
    err "Could not create mountpoint ${MOBBUILD_CREDS_DIR}."
    exit 1
  fi
  # This disk can be shared between multiple instances of mobbuild.
  # Mount it read-only.
  if ! mount -o ro,noexec,nosuid "${disk_drive}" "${MOBBUILD_CREDS_DIR}"; then
    err "Could not mount ${disk_drive} with required permissions"
    err "Mobbuild credentials cannot be initialized."
    exit 1
  fi

  # Now consume credentials.
  # Don't choke on individual errors, so we can surface all issues together.
  setup_failed=0
  setup_chromium_svn || setup_failed=1

  as_mobbuild git config --global user.name "${GIT_USER_NAME}" || setup_failed=1
  as_mobbuild git config --global user.email "${GIT_USER_EMAIL}" ||
      setup_failed=1
  copy_to_homedir "${GITCOOKIES_FILE}" || setup_failed=1

  copy_to_homedir "${CIDB_CREDS_DIR}" || setup_failed=1
  copy_to_homedir "${TREE_STATUS_PASSWORD_FILE}" || setup_failed=1
  copy_to_homedir "${GMAIL_CREDENTIALS_FILE}" || setup_failed=1

  if [ ${setup_failed} != 0 ]; then
    err "Error(s) occurred in credentials setup."
    exit 1
  fi
end script
