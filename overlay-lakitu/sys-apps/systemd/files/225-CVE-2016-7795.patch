Cherry-picked from:
https://github.com/systemd/systemd/commit/8523bf7dd514a3a2c6114b7b8fb8f308b4f09fc4

commit 9a5592cf9a5f54cc0a00b29bea761d42b575ca21
Author: Zbigniew JÄ™drzejewski-Szmek <zbyszek@in.waw.pl>
Date:   Thu Sep 29 16:06:02 2016 +0200

    pid1: process zero-length notification messages again
    
    This undoes 531ac2b234. I acked that patch without looking at the code
    carefully enough. There are two problems:
    - we want to process the fds anyway
    - in principle empty notification messages are valid, and we should
      process them as usual, including logging using log_unit_debug().

diff --git a/src/core/manager.c b/src/core/manager.c
index 9d2b0fe..7c7568c 100644
--- a/src/core/manager.c
+++ b/src/core/manager.c
@@ -1478,13 +1478,12 @@ static unsigned manager_dispatch_dbus_queue(Manager *m) {
         return n;
 }
 
-static void manager_invoke_notify_message(Manager *m, Unit *u, pid_t pid, char *buf, size_t n, FDSet *fds) {
+static void manager_invoke_notify_message(Manager *m, Unit *u, pid_t pid, char *buf, FDSet *fds) {
         _cleanup_strv_free_ char **tags = NULL;
 
         assert(m);
         assert(u);
         assert(buf);
-        assert(n > 0);
 
         tags = strv_split(buf, "\n\r");
         if (!tags) {
@@ -1583,25 +1582,27 @@ static int manager_dispatch_notify_fd(sd_event_source *source, int fd, uint32_t
                         continue;
                 }
 
+                /* The message should be a string. Here we make sure it's NUL-terminated,
+                 * but only the part until first NUL will be used anyway. */
                 buf[n] = 0;
 
                 /* Notify every unit that might be interested, but try
                  * to avoid notifying the same one multiple times. */
                 u1 = manager_get_unit_by_pid(m, ucred->pid);
                 if (u1) {
-                        manager_invoke_notify_message(m, u1, ucred->pid, buf, n, fds);
+                        manager_invoke_notify_message(m, u1, ucred->pid, buf, fds);
                         found = true;
                 }
 
                 u2 = hashmap_get(m->watch_pids1, LONG_TO_PTR(ucred->pid));
                 if (u2 && u2 != u1) {
-                        manager_invoke_notify_message(m, u2, ucred->pid, buf, n, fds);
+                        manager_invoke_notify_message(m, u2, ucred->pid, buf, fds);
                         found = true;
                 }
 
                 u3 = hashmap_get(m->watch_pids2, LONG_TO_PTR(ucred->pid));
                 if (u3 && u3 != u2 && u3 != u1) {
-                        manager_invoke_notify_message(m, u3, ucred->pid, buf, n, fds);
+                        manager_invoke_notify_message(m, u3, ucred->pid, buf, fds);
                         found = true;
                 }
 
